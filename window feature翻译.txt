top—level window
owned window

窗口类型
重叠 Windows
弹出 Windows
Child Windows
Layered Windows
Message-Only Windows

窗口关系
窗口的前景与背景
Owned Windows
Z-Order

Window的显示状态
Active Window
Disabled Windows
窗口可见性
窗口的最小化、最大化以及还原

窗口的大小与位置
默认尺寸与位置
Tracking Size
系统命令
大小、位置相关函数
大小、位置相关消息

窗口动画

窗口布局与镜像
Mirroring Dialog Boxes and Message Boxes
Mirroring Device Contexts Not Associated with a Window

重叠窗口有标题栏，边框，客户区；它一般作为应用程序的主窗口。同时也可拥有窗口菜单、最小化最大化按钮，
以及滚动条。一个典型的重叠窗口会拥有上述所有的部件。
使用 CreateWindowEx函数，指定WS_OVERLAPPED 或者WS_OVERLAPPEDWINDOW风格，应用程序就可以创建一个重叠窗口。
如果使用WS_OVERLAPPED风格，窗口会包含一个标题栏和边框。如果使用WS_OVERLAPPEDWINDOW风格，
窗口将会拥有一个标题栏，可调的边框，窗口菜单以及最小化、最大化按钮。

弹出窗口是一个特殊的重叠窗口，一般用来做显示在主窗口外的对话框、消息框、以及其他暂时性的窗口。
，弹出窗口的标题栏是可选的。弹出窗口的风格和重叠窗口的风格是一样的:都是用WS_OVERLAPPED风格。
你可以在CreateWindowEx函数中指定WS_POPUP风格来创建一个弹出窗口。
标题栏通过WS_CAPTION风格设定，设定WS_POPUPWINDOW风格可以创建一个拥有边框和菜单的弹出窗口。
WS_CAPTION风格一定要与WS_POPUPWINDOW风格组合使用，才能让窗口菜单变的可见。

子窗口
指定 WS_CHILD风格的窗口是一个子窗口，子窗口被限制在父窗口的客户区内。
一个典型的应用会通过子窗口来将父窗口的客户区分割成几个不同的功能区域。
在CreateWindowEx函数中指定WS_CHILD风格就可以创建出一个子窗口。

一个子窗口一定会有一个父窗口，父窗口可以是一个重叠窗口，也可以是一个弹出窗口，甚至可以是一个子窗口。
调用CreateWindowEx函数时可以指定一个父窗口。不过如果你使用了WS_CHILD风格，但是没有指定父窗口。
系统不会创建这个(子)窗口。

一个子窗口，除了客户区之外不再有其它的功能，
除非显示指定。一个应用程序可以为子窗口请求标题栏、
窗口菜单、最大化、最小化按钮、边框以及滚动条。
但是子窗口不能拥有菜单。如果用程序指定一个菜单句柄，
无论是注册子窗口还是创建子窗口这个菜单句柄都会被忽略。
如果没有指定边界风格。系统会创建一个无边界的窗口。
应用程序可以使用无边界的子窗口来分隔父窗口的客户区，同时，
这些区域的边界对用户是不可见的。

位置
系统总是把子窗口放到父窗口客户区的左上角。
子窗口的任何一部分将永远不会显示在父窗口的边界以外。
如果一个应用创建了一个比父窗口还要大的子窗口。
或者在设置子窗口的位置时部分或者全部超出父窗口的边界
系统将会裁剪子窗口。也就是说超出父窗口客户区的那部分将不会被显示
以下动作，将会同时影响到父窗口和子窗口：
销毁——子窗口将会在父窗口消毁之前消毁。
隐藏——窗口将会在父窗口之前隐藏。子窗口只有在父窗口可见时才可见。
移动——子窗口跟随父窗口的客户区移动。移动完毕后子窗口负责重绘自己的客户区。
显示——子窗口在父窗口显示之后显示。

剪切
系统不会自动从父窗口的客户区裁剪一个子窗口，也就是说，父窗口仍然会绘制被子窗口覆盖的那部分区
域(尽管绘制了也仍然看不见)。但是，如果父窗口拥有了WS_CLIPCHILDREN 风格，系统就会从父窗口的客户区
裁剪子窗口，子窗口被裁剪后，父窗口无法(无需)绘制被子窗口覆盖的区域。

同一个客户区内，一个子窗口可与另一个子窗口重叠。如果一个子窗口跟另一个或多个子窗口共享同一个
客户区，那么这个子窗口就叫“同级窗口”，同级窗口之间可相互绘制他人的客户区，除非设定了
WS_CLIPSIBLINGS风格。一个子窗口有了WS_CLIPSIBLINGS风格后，该窗口内的任何其他同级窗口的部分将会被
裁剪掉。
如果一个窗口拥有WS_CLIPCHILDREN或WS_CLIPSIBLINGS中的任何一个，性能上都会有轻微的损失。每个窗口都会占用
系统资源，所以应用程序不该滥用子窗口，出于性能上的考虑，应用程序应该从逻辑上划分好主窗口该干的事情、并且
主窗口的窗口过程中处理，而不是使用子窗口。

与父窗口的关系
应用程序可以使用 SetParent函数更改一个子窗口的父窗口。这种情况下，系统会将子窗口从旧的父窗口客户区移走，
然后移到新父窗口的客户区。如果 SetParent函数指定了一个Null句柄，则新的父窗口将会是桌面窗口。这种情况下，
子窗口是直接绘制在桌面上的——在任何其他窗口的边界之外。 GetParent函数返回一个子窗口的父窗口。

父窗口会交出部分客户区给子窗口，子窗口从这部分客户区内获取所有输入。对于父窗口的各个子窗口，窗口类可以不相同。
这意味着应用程序可以使用不同外观、执行不同任务的子窗口来填充父窗口。例如，一个对话框可以包含多个不同种类的控件，
每个控件都是一个可以从用户那里接受不同数据的子窗口。

一个子窗口只能有一个父窗口，但一个父窗口可以同时拥有多个子窗口。每一个子窗口又可以依次拥有多个子窗口。在上述窗口
链中，每一个子窗口都可以称作是原始父窗口的后裔窗口。应用程序可以使用IsChild函数来判断一个窗口是不是另一个窗口的子窗口
或者后裔窗口。

EnumChildWindows 函数枚举父窗口的所有子窗口，然后把每个子窗口的句柄传给应用程序定义的回调函数中，后裔窗口也会被枚举。


消息
系统将子窗口的输入消息越过父窗口直接传递给子窗口，唯一的例外是使用EnableWindow 函数将子窗口设为Disable态的时候。
这种情况下，系统将原本应该传给子窗口的消息转为传给父窗口。该策略可以允许父窗口在必要的时候检查输入消息、激活子窗口。
子窗口可以拥有一个独一无二的整型ID，当涉及到控件窗口时，子窗口的ID显得尤为重要。应用程序通过发送消息控制控件活动。
应用程序使用控件子窗口的ID来投递消息到控件上。另外，控件也会发送通知类消息给父窗口。一个通知类消息包含控件子窗口的
ID，父窗口使用该ID识别出是哪个子控件发送的消息。一个应用程序通过 CreateWindowEx 函数的hMenu参数
指定其他类型的子窗口的子窗口ID，此时hMenu参数是一个值而不是菜单的句柄。

层窗口
   使用层窗口可以显著提升性能，复杂的形状、动画、alpha混合等特效还可以提升窗口的视觉效果。
系统自动组成并重绘分层窗口和底下的应用程序窗口，这样做的好处是，层窗口被渲染的很顺滑，
不会出现复杂的窗口区域常见的的闪烁。此外，分层的窗口可以做成半透明效果———也就是alpha混合。
  调用 CreateWindowEx函数时指定WS_EX_LAYERED扩展风格，或者在窗口创建完毕后调用SetWindowLong 
函数指定 WS_EX_LAYERED 扩展风格，即可创建出一个层窗口。只有调用了 SetLayeredWindowAttributes 
或者 UpdateLayeredWindow 函数后才能使层窗口显示出来。
  注意：从win8开始，WS_EX_LAYERED 扩展风格不仅可用在top-level窗口上，还可用在子窗口上，在这之前的windows
版本中，WS_EX_LAYERED 扩展风格只能用在top-level窗口上。

  调用SetLayeredWindowAttributes设置一个给定的分层窗口的不透明度或透明度色值。调用完毕后，当窗口显示或者
改变大小时，系统仍会让窗口重绘。但是，如果一个层窗口作为其亲属窗口在桌面上移动的结果而显示，此时系统不会
让窗口重绘，因为系统已经保存了层窗口的镜像。遗留的应用无需为了给窗口增加半透明或透明效果而修改现有的重绘
代码，应为系统会将调用了SetLayeredWindowAttributes的窗口的重绘重定向到“屏幕外内存”，并重新组合它达到预期效果。

  当需要更快更高效的动画、或者按像素的alpha混合时，可以使用UpdateLayeredWindow函数。当应用程序需要直接提供
层窗口的形状与内容时，应该首先调用UpdateLayeredWindow函数，不能调用SetLayeredWindowAttributes以使用生系统提供的
重定向机制。另外，直接使用UpdateLayeredWindow可以使内存更加高效，因为系统无需用额外的存储空间保存重定向窗口的镜像。
调用UpdateLayeredWindow改变层窗口的位置和大小可使动画的效率达到最高。值得注意的是，SetLayeredWindowAttributes调用
完毕，随后的UpdateLayeredWindow调用会失败，知道WS_EX_LAYERED被重新设定。
  层窗口的点击测试基于窗口的形状和透明度，也就是，alpha值为0的区域，鼠标消息将会穿透过去。但是，如果层窗口使用了
 WS_EX_TRANSPARENT扩展风格，窗口形状将会被忽略，鼠标消息将会传递给层窗口下方的窗口。
 
消息窗口
  消息窗口可以接收、发送消息，它是不可见的、没有Zorder、无法被枚举到、无法接受广播消息，该窗口只是简单的做消息分发。
  调用 CreateWindowEx函数时将第七个参数hWndParent设置成HWND_MESSAGE常量，或者一个已存在的消息窗口的句柄，即可创建
一个消息窗口，也可以使用SetParent函数，将hWndNewParent形参设置成HWND_MESSAGE常量，来将一个现有的窗口变成消息窗口。
  调用 FindWindowEx函数，并将 hwndParent 形参设置成HWND_MESSAGE常量，即可找到所有的消息窗口。另外， 如果FindWindowEx
函数的hwndParent 和 hwndChildAfter两个形参都是NULL，将会同时搜索消息窗口、top-level窗口。
  

二窗口关系
窗口与用户或者其他窗口可以有很多种关系，一个窗口可能是个owned窗口、前景窗口、背景窗口，还可能跟另一个窗口有Z-order
上的关系，以下将会详细讨论：
   1，前景窗口与背景窗口
   一个进程可以有多个线程，每个线程都可以创建窗口。假如窗口正在被用户使用，那么创建窗口的线程就叫“前台线程”，创建出的
 窗口叫做前台窗口。其他的线程都称作背景线程，它们创建出的窗口叫背景窗口。
每个线程都有一个优先级，该优先级决定了线程所能得到的CPU时间片的大小。虽然应用可以设置线程的优先级，但通常来讲，前台
线程的优先级会高于背景线程。因为优先级更高，所以前台线程能够比后台线程收到更多的CPU时间片。前台线程的常规优先级是9，
后台线程是7。
   用户可以通过点击、 ALT+TAB 或者 ALT+ESC 等方式将一个窗口变为前台窗口。调用GetForegroundWindow 函数可获得前台窗口
的句柄。通过对比GetForegroundWindow 函数返回的句柄 跟 应用程序本身的句柄，可以判断出当前应用是不是前台窗口。
   应用程序可以调用 SetForegroundWindow函数来设置前台窗口。
   一个进程能否设置前台窗口，会受到系统的约束，当进程满足以下条件中的任何一个的时候，才能够设置前台窗口。
   A.该进程正是当前前台窗口
   B.该进程被一个前台进程启动
   C.该进程收到最后一个输入事件
   D.当前没有前台进程
   E.前台进程正在被调试
   F.前台(进程)没被锁住(详见LockSetForegroundWindow函数)
   G.前台锁住超时(详见SystemParametersInfo中的SPI_GETFOREGROUNDLOCKTIMEOUT)
   H.没有菜单被激活
   一个有能力设置前台窗口的进程，可以通过调用AllowSetForegroundWindow函数、或者使用BSF_ALLOWSFW标志
调用 BroadcastSystemMessage函数来使得另一个进程拥有设置前台窗口的能力。前台线程调用 LockSetForegroundWindow
后，可以使SetForegroundWindow 函数失效。

 2，owned窗口
   一个重叠窗口或者弹出窗口可以被另一个重叠窗口或弹出窗口"拥有"。一个窗口"被拥有"的区域有以下限制：
   A.owned窗口在Z-order上总是高于它的owner
   B.系统会在销毁owner时自动销毁owned窗口
   C.owner窗口最小化时，owned窗口会被隐藏
   
   只有重叠窗口或弹出窗口才可以做owner窗口，子窗口不能做owner窗口。调用CreateWindowEx函数并指定WS_OVERLAPPED 
或WS_POPUP风格，然后将 hwndParent 形参赋一个owner窗口的句柄，即可创建出一个owned窗口。hwndParent的值必须是
重叠窗口或弹出窗口。如果hwndParent的值是一个子窗口，系统会将该子窗口最终所属的top-level父窗口的句柄赋值给hwndParent。
own关系一经指定，就无法再改变。
   对话框和消息框都是默认的owned窗口。应用程序在调用创建对话框和消息框的函数的时候就指定了他们的owner窗口。
   使用GW_OWNER标志调用GetWindow函数即可获得一个窗口的owner。
   
 3，Z-order
	窗口的Z序指定了窗口在一堆窗口中的位置。这些窗口是沿一个假想的轴排列的——也就是Z轴，指向屏幕外的方向。
处在Z序顶端的窗口会覆盖其他窗口，处在Z序底端的窗口会被其他窗口覆盖。
	系统用一个List维护Z序。系统根据一个窗口是否是topmost窗口、toplevel窗口、子窗口来将其插入到Z序列表中。
一个topmost窗口会覆盖其他非topmost的窗口，不管它(非topmost窗口)是活动窗口还是前景窗口。topmost窗口具有
WS_EX_TOPMOST样式。 在Z序上，所有topmost窗口显示在在任何非topmost窗口之前。子窗口按照z顺序与其父窗口组织
在一起。
	当一个应用创建一个窗口的时候，系统会将该窗口放在同类窗口的Z序顶端，使用BringWindowToTop函数可以将窗口
提到同类窗口Z序的顶端。使用SetWindowPos and DeferWindowPos 方法可以改编Z序。
	用户通过激活不同窗口来改变Z序，系统会把活动窗口放在同类窗口Z序的顶部。当一个窗口位于Z序的顶部的时候，
它的子窗口也同样在Z序的顶部。使用GetTopWindow 函数可以搜索一个父窗口的所有子窗口，并返回Z序最高的子窗口的
句柄。GetNextWindow 方法会在Z序上检索一个窗口(句柄)的下一个或前一个窗口。

窗口显示状态
	在任何一个时刻，一个窗口可能是活动的，也可能是非活动的；是隐藏的，或者是可见的；还可能是最小化的、最大化的
	或者还原态的。这些统称为窗口的显示状态。以下几个话题详细讨论窗口显示状态：
	1，活动窗口
	2，disabled窗口
	3，窗口可见性
	4，最小化、最大化与还原
	活动窗口
	活动窗口是指用户正在使用的toplevel窗口。为了让用户能够轻易地辨识活动窗口，系统将活动窗口放在Z序的顶端，并将
窗口的标题栏、边界的颜色、设置为系统定义的颜色。只有toplevel窗口才能够做活动窗口。当用户正在使用一个子窗口时，
系统会激活跟该子窗口关联的toplevel的父窗口。
		在任意时刻，系统中只有一个toplevel窗口是活动窗口，用户可以通过点击来激活一个toplevel窗口(或者点击它的子窗口)
	或者使用 ALT+ESC or ALT+TAB 组合键。应用程序可以使用SetActiveWindow 函数来激活一个toplevel窗口，其他函数，
	诸如SetWindowPos, DeferWindowPos, SetWindowPlacement, and DestroyWindow，会引发系统激活其他toplevel窗口。
	虽然一个应用随时可以激活另外一个toplevel窗口，为了避免引起用户的困惑，仅当响应用户操作时才能进行上述操作
	应用可以使用GetActiveWindow 函数来检索活动窗口的句柄。
		当激活态由一个应用的toplevel窗口转向另一个应用的toplevel窗口时，系统将会发送WM_ACTIVATEAPP消息到上述两个应用。
	通知它俩这个变化。当激活态在同一个应用的不同toplevel窗口间变化的时候，系统会发送WM_ACTIVATE消息到两个窗口。
	
	Disabled窗口
		窗口可以被禁用。一个Disable窗口不会收到用户的任何键盘输入和鼠标输入。但是能够收到其他窗口、其他应用
	、其他系统的消息。应用程序通常禁用窗口以阻止用户使用窗口。例如，应用可以禁用对话框中的按钮以防止用户选择它。 
	应用程序可以随时启用已禁用的窗口; 使窗口恢复正常输入。
	默认情况下，窗口创建时即为enable态。应用可以指定WS_DISABLED 风格来禁用新窗口。应用可以使用EnableWindow函数来
	启用、禁用一个已存在的窗口。系统会发送WM_ENABLE消息给一个使能态即将发生改变的窗口。应用程序可以通过使用
	IsWindowEnabled函数来确定是否启用了窗口。
		当一个子窗口被禁用，系统会将子窗口的鼠标输入消息投递给父窗口。父窗口使用这些消息来确定是否启用子窗口。
	详细信息参见Mouse Input。
	在某一时刻，只有一个窗口能够收到键盘输入；我们说那个窗口拥有键盘焦点。如果一个应用使用EnableWindow函数来禁用
	一个拥有键盘焦点的窗口，这个窗口会失去键盘焦点、变为禁用态。EnableWindow 函数随后将键盘焦点设为NULL，也就意味着
	没有窗口能够获得焦点。如果一个子窗口、或者子孙窗口，拥有键盘焦点，他们的焦点会随着父窗口被禁用而消失。
	详细信息请参见Keyboard Input.
	
	窗口可见性
		一个窗口，要么可见，要么不可见。系统会将可见的窗口显示到屏幕上。系统会通过不重绘隐藏一个不可见的窗口。
	如果一个窗口是可见的，用户可以向窗口提供输入并查看窗口的输出。如果一个窗口不可见，将等效于禁用。一个隐藏的
	窗口可以处理来自其他系统、其他窗口的消息，但是不能处理用户输入也不能显示输出。应用可以在创建窗口的时候设置
	窗口的可见性。随后，应用程序可以更改可见性状态。
		为窗口设置WS_VISIBLE样式时，窗口可见。 默认情况下，CreateWindowEx函数创建一个隐藏窗口，除非应用程序指
	定WS_VISIBLE样式。通常，应用程序在创建了一个窗口之后再设置WS_VISIBLE风格，以保持创建过程的细节对用户隐藏。
	例如，应用程序可以在定制窗口的外观时保持新窗口隐藏。如果在CreateWindowEx中指定了WS_VISIBLE样式，系统在创
	建窗口之后，但在显示窗口之前，就会将WM_SHOWWINDOW消息发送到窗口。
		应用可以使用IsWindowVisible函数开确定一个窗口是否是可见的。应用程序使用以下函数来展示或者隐藏一个窗口：
	 ShowWindow, SetWindowPos, DeferWindowPos, or SetWindowPlacement or SetWindowLong。以上函数通过设置或者移除
	 WS_VISIBLE style 风格来展示或者隐藏窗口。他们还会在展示或者隐藏之前发送WM_SHOWWINDOW 消息给窗口。
		当一个owner窗口最小化时，系统自动隐藏与之关联的owned窗口。类似地，当owner窗口恢复时，系统自动显示关
	联的owned窗口。在以上两种情况中，系统会在owned窗口被展示或者隐藏之前向其发送WM_SHOWWINDOW 消息。有时，
	应用程序可能需要在不最小化owner窗口的情况下隐藏owned窗口。这种情况下，应用程序可以使用ShowOwnedPopups函数。
	该函数设置或者移除所有owned窗口的WS_VISIBLE样式然后在隐藏或者展示owned窗口之前向他们发送WM_SHOWWINDOW消息。
	隐藏owner窗口不会影响owned窗口的可见性。
		当父窗口可见时，与之关联的子窗口可是可见的。类似地，当父窗口被隐藏时，其子窗口也被隐藏。 
	最小化父窗口不会影响子窗口的可见性; 也就是说，子窗口随着父窗口一起最小化，但WS_VISIBLE样式未改变。
		即使一个窗口拥有WS_VISIBLE样式，永不也不一定能够在屏幕上看见这个窗口。其他窗口可能完全盖住了这个窗口。
	还有可能该窗口被移动到了屏幕边缘之外。此外，可见的子窗口受制于通过其父子关系建立的裁剪规则。如果窗口的
	父窗口不可见，它也将不可见。 如果父窗口移动超出屏幕边缘，子窗口也会移动，因为子窗口相对于父窗口的左上角
	绘制。例如，即使子窗口及其父窗口都具有WS_VISIBLE风格，用户可能将包含子窗口的父窗口移动到离屏幕边缘足
	够远的地方，用户就可能无法看到子窗口。
		
	窗口的最小化、最大化、与还原
		最大化窗口是具有WS_MAXIMIZE样式的窗口。 默认情况下，系统会放大最大化的窗口，以便它充满屏幕，
	(假如是子窗口，则是充满父窗口的客户区)。虽然窗口大小可以被设置为与最大化窗口相同的大小，但是最大化窗口
	稍微不同。系统自动将窗口的标题栏移动到屏幕顶部或父窗口的客户区域的顶部。 此外，系统禁用窗口的大小调整
	边框和标题栏的窗口定位功能（以便用户不能通过拖动标题栏来移动窗口）。
	
		
	
	
	
	
	
	
	
	
	owner 窗口 与 子窗口
Z序(重绘)方面
1，父窗口不重绘子窗口区域
2，owned窗口同子窗口一样覆盖在父窗口、owner窗口之上
3，owner窗口仍然会绘制被owned窗口覆盖的区域

位置方面：
1，子窗口位于父窗口客户区
2，owned窗口位置不限

其他
1，子窗口的父窗口可改变
2，owned窗口的owner窗口一经指定终生不变